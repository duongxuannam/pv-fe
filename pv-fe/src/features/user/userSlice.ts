import {
  createAsyncThunk,
  createSelector,
  createSlice,
  PayloadAction,
} from "@reduxjs/toolkit"
import { RootState, AppThunk } from "../../app/store"
import { fetchCount, fetchUser } from "./userAPI"
import { AxiosError } from "axios"

type Status = "idle" | "loading" | "failed"

export interface UserState {
  value: number
  status: Status
  id: string
  name: string
  title: string
  error: string
}

const initialState: UserState = {
  value: 0,
  status: "idle",
  id: "",
  name: "",
  title: "",
  error: "",
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const incrementAsync = createAsyncThunk(
  "user/fetchCount",
  async (amount: number) => {
    const response = await fetchCount(amount)
    // The value we return becomes the `fulfilled` action payload
    return response.data
  },
)

export const userSlice = createSlice({
  name: "user",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1
    },
    decrement: (state) => {
      state.value -= 1
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action: PayloadAction<number>) => {
      state.value += action.payload
    },
    setStatus: (state, action: PayloadAction<Status>) => {
      state.status = action.payload
    },
    setUser: (
      state,
      action: PayloadAction<Pick<UserState, "name" | "id" | "title">>,
    ) => {
      state.name = action.payload.name
      state.title = action.payload.title
      state.id = action.payload.id
    },
    setError: (state, action: PayloadAction<string>) => {
      state.error = action.payload
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.pending, (state) => {
        state.status = "loading"
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = "idle"
        state.value += action.payload
      })
      .addCase(incrementAsync.rejected, (state) => {
        state.status = "failed"
      })
  },
})

export const {
  increment,
  decrement,
  incrementByAmount,
  setError,
  setStatus,
  setUser,
} = userSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state: RootState) => state.user.value
export const selectUserId = (state: RootState) => state.user.id
export const selectUserName = (state: RootState) => state.user.name
export const selectUserTitle = (state: RootState) => state.user.title

export const selectUserRole = (state: RootState) => state.user.role
// export const selectUser = (state: RootState): User => ({
//   id: state.user.id,
//   name: state.user.name,
//   title: state.user.title,
// })

export const selectUser = createSelector(
  [selectUserId, selectUserName, selectUserTitle],
  (id, name, title) => ({ id, name, title }),
)
// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd =
  (amount: number): AppThunk =>
  (dispatch, getState) => {
    const currentValue = selectCount(getState())
    if (currentValue % 2 === 1) {
      dispatch(incrementByAmount(amount))
    }
  }

export const fetchUserRedux = (): AppThunk => async (dispatch, getState) => {
  try {
    dispatch(setStatus("loading"))
    const data = await fetchUser()
    dispatch(
      setUser({
        id: data.data.id,
        title: data.data.title,
        name: data.data.name,
      }),
    )
  } catch (error: AxiosError | any) {
    if (error instanceof AxiosError) {
      dispatch(setError(error.message))
    } else {
      dispatch(setError(error.toString()))
    }
  } finally {
    dispatch(setStatus("idle"))
  }
}

export default userSlice.reducer
